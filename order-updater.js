// Arquivo independente para garantir atualiza√ß√£o de pedidos
console.log('üîÑ Inicializando atualizador de pedidos autom√°tico');

// Fun√ß√£o para atualizar todos os pedidos vis√≠veis
async function refreshAllOrders() {
    try {
        console.log('üîÑ Verificando atualiza√ß√µes para todos os pedidos');
        
        // Busca todos os pedidos na interface
        const orderCards = document.querySelectorAll('.order-card');
        console.log(`üìã Encontrados ${orderCards.length} pedidos para verificar`);
        
        if (orderCards.length === 0) return;
        
        // Verifica se temos um token de acesso
        if (!state || !state.accessToken) {
            console.log('‚ùå Sem token de acesso, n√£o √© poss√≠vel verificar pedidos');
            return;
        }
        
        // Para cada pedido, busca seu status atual
        for (const card of orderCards) {
            const orderId = card.getAttribute('data-order-id');
            if (!orderId) continue;
            
            try {
                console.log(`üîç Verificando status do pedido: ${orderId}`);
                const currentStatusElem = card.querySelector('.order-status');
                const currentStatus = currentStatusElem ? currentStatusElem.textContent.trim() : 'Desconhecido';
                
                // Busca informa√ß√µes atualizadas do pedido na API
                const updatedOrder = await makeAuthorizedRequest(`/order/v1.0/orders/${orderId}`, 'GET');
                
                if (updatedOrder && updatedOrder.status) {
                    const newStatusText = getStatusText(updatedOrder.status);
                    
                    console.log(`üìä Status: API=${updatedOrder.status}, UI=${currentStatus}, Texto=${newStatusText}`);
                    
                    // Se o status for diferente, atualiza na interface
                    if (currentStatus !== newStatusText) {
                        console.log(`üîÑ Atualizando pedido ${orderId} de "${currentStatus}" para "${newStatusText}"`);
                        updateOrderStatus(orderId, updatedOrder.status);
                        
                        // Notifica o usu√°rio
                        showToast(`Pedido #${orderId.slice(0, 6)} atualizado para ${newStatusText}`, 'info');
                    }
                }
            } catch (error) {
                console.error(`‚ùå Erro ao verificar pedido ${orderId}:`, error);
            }
            
            // Pequena pausa entre requisi√ß√µes para n√£o sobrecarregar
            await new Promise(resolve => setTimeout(resolve, 300));
        }
    } catch (error) {
        console.error('‚ùå Erro geral na atualiza√ß√£o de pedidos:', error);
    }
}

// Iniciar ap√≥s carregamento da p√°gina
window.addEventListener('load', function() {
    console.log('üöÄ Configurando atualizador autom√°tico de pedidos');
    
    // Primeira atualiza√ß√£o ap√≥s 5 segundos
    setTimeout(() => {
        refreshAllOrders();
        
        // Configurar atualiza√ß√µes regulares a cada 20 segundos
        setInterval(refreshAllOrders, 20000);
    }, 5000);
});
